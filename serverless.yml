# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awstrader
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  bucket: aws-trader-bot-states #unique global name it will create for the bucket
  dynamodb:
    stages:
      - ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: dev
  lambdaHashingVersion: 20201221
  environment:
    ACCOUNTS_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    #S3 Permissions
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::${self:custom.bucket}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

functions:
  hello:
    handler: handler.hello
    events:
      - schedule: cron(2 * * * ? *) # every hour at the minute 2

resources:
  Resources:
    botStateBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket} # Getting the name of table I defined under custom in serverless.yml
    # Make Bucket publicly accessable
    botStateBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket: !Ref botStateBucket
          PolicyDocument:
            Statement:
              - Effect: Allow
                Principal: '*' # public access to access the bucket files 
                Action: s3:GetObject
                Resource: 'arn:aws:s3:::${self:custom.bucket}/*'
    
    AccountsDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "accountId"
            AttributeType: "S"
          -
            AttributeName: "resourceId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "accountId"
            KeyType: "HASH"
          -
            AttributeName: "resourceId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_IMAGE"
        TableName: ${self:provider.environment.ACCOUNTS_TABLE}

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
